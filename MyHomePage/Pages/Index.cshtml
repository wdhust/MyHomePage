@page "/"

<h1>Hello, world!</h1>

<p>Welcome to your new app.</p>

<div>
    <p>Jump to page: <NavLink href="/counter">Counter</NavLink> </p>
    <p>Or jump to page: <NavLink href="/fetchdata">FetchData</NavLink> </p><br/>
</div>
<div>
    <input ref="fileElemRef" type="file" onchange="@OnSelectedFileChanged"/><br />
    <div><p>@index / @lineCount</p></div>
</div>


@*<div>
    <input type="text" bind="@message"/>
    <button onclick="@ShowMessage">Show message</button>
</div>
<div>
    <br />
    <input ref="inputElemRef" type="file" accept="text/plain" onchange="@ReadTextFromInputFile" /><br />
    <p>TextContent: </p>
    <p>@textContent</p><br />
</div>
<div>
    <button disabled="@isDownloadButtonDisabled" onclick="@DownloadResultFile">Download result file</button>
</div>*@

<SurveyPrompt Title="How is Blazor working for you?" />

@functions
{
    ElementRef fileElemRef;

    int lineCount = 1000 * 10 * 20;
    int index = 0;

    async void OnSelectedFileChanged()
    {
        var hasSelectedFile = WebFile.HasSelectedFile(fileElemRef);
        Console.WriteLine($"{hasSelectedFile}");
        if (!hasSelectedFile)
            return;

        Console.WriteLine("Reading file ...");
        await WebFile.ReadFileToBuffer(fileElemRef);

        var bufferLength = WebFile.GetBufferLength();
        Console.WriteLine($"Buffer length: {bufferLength}");

        Console.WriteLine("Getting buffer data ...");
        var buffers = new List<string>();
        for (var i = 0; i < bufferLength; i++)
        {
            var buf = await WebFile.GetBufferData(i);
            buffers.Add(buf);
        }

        Console.WriteLine("Filling buffer ...");

        WebFile.InitBuffer(buffers.Count);
        for (var i = 0; i < buffers.Count; i++)
        {
            //await WebFile.FillBuffer($"Line{i + 1}: {buffers[i]}\n");
            await WebFile.SetBufferData(i, $"Line{i + 1}: {buffers[i]}\n");
        }

        Console.WriteLine("Writing file ...");

        await WebFile.WriteBufferToFile("resultFile.txt");
        WebFile.ClearBuffer();

        Console.WriteLine("Done!");

        StateHasChanged();
    }



    /*
    string message = "";

    async void ShowMessage()
    {
        //await WebFileUtil.ShowPrompt(message);
        //textContent = message;

        var str = "Test string";
        var count = 1000*100;
        var strs = await WebFileUtil.GetStringArray(str, count);
        foreach (var s in strs)
        {
            Console.WriteLine(s);
        }
    }

    ElementRef inputElemRef;
    string textContent = "File not to be selected yet!";

    async void ReadTextFromInputFile()
    {
        //textContent = await WebFileUtil.ReadUploadedFileAsText(inputElemRef);

        var fileContents = await WebFileUtil.ReadLargeTextFile(inputElemRef);
        Console.WriteLine($"{fileContents.Length}");

        for (var index = 0; index < fileContents.Length; index++)
        {
            Console.WriteLine($"{index}: {fileContents[index]}");
        }

        //foreach (var s in fileContents.Take(20))
        //{
        //    Console.WriteLine(s);
        //}

        //Console.WriteLine($"textContent: {textContent}");

        isDownloadButtonDisabled = false;

        StateHasChanged();
    }

    bool isDownloadButtonDisabled = true;

    async void DownloadResultFile()
    {
        await WebFileUtil.WriteTextFileAndDownload("resultFile.txt",
            $"Converted text content:{Environment.NewLine}{textContent}");
    }
    */
}

